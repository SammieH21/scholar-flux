[tool.poetry]
name = "scholar_flux"
authors = ["Sammie L. Haskin <44345113+SammieH21@users.noreply.github.com>"]
description = "The ScholarFlux API is an open-source project designed to streamline access to academic and scholarly resources across various platforms. It offers a unified API that simplifies querying academic databases, retrieving metadata, and performing comprehensive searches within scholarly articles, journals, and publications."
version = "0.1.0b.1"
readme = "README.md"
license = "Apache-2.0"
packages = [{include = "scholar_flux", from="src"}]
include = ["src/scholar_flux/py.typed", "README.md", "LICENSE", "NOTICE"]

[tool.poetry.dependencies]
python = ">=3.10"
requests = ">=2.25.0,<3.0.0"
requests-cache = {extras = ["security"], version = "^1.2.0"}
python-dotenv = ">=0.15.0"
pydantic = "^2.10.6"
sqlalchemy = {version = ">=2.0.0", optional = true}
redis = {version = ">=4.0.0", optional = true}
pymongo = {version = ">=4.0.0", optional = true}
cryptography = {version = ">=3.0.0", optional = true}
xmltodict = {version = ">=0.12.0", optional = true}
pyyaml = {version = ">=5.0.0", optional = true}

[tool.poetry.extras]
database = ["sqlalchemy", "redis", "pymongo"]
cryptography = ["cryptography"]
parsing = ["xmltodict", "pyyaml"]

[tool.poetry.group.testing.dependencies]
pytest = "^8.4.1"
pytest-cov = "*"
requests-mock = "*"

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.0"
flake8 = "^7.3.0"

    

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
lint.extend-select = ["C4", "NPY", "PD", "SIM", "TCH"]
lint.ignore = ["C408", "E402", "TCH001", "TCH002"]
show-fixes = true
line-length = 120

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ANN",    # don’t require type annotations
    "ARG",     # Allow Unused function args 
    "S101",   # allow plain `assert` (pytest’s way)
    "SIM117", # allow nested `with` statements for readability purposes
    "E731",   # Allow assignment of a lambda
    "B018",   # allow useless expressions (fine in asserts)
    "FBT",    # ignore boolean positional arguments
    "PT004",  # fixture without value
    "ARG001", # unused function args (pytest fixtures often look unused)
]

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = ''
